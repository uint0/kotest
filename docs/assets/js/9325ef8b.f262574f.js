"use strict";(self.webpackChunkkotestdocs=self.webpackChunkkotestdocs||[]).push([[73581],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),m=l(n),d=r,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return n?o.createElement(k,s(s({ref:t},p),{},{components:n})):o.createElement(k,s({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=m;var a={};for(var c in t)hasOwnProperty.call(t,c)&&(a[c]=t[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,s[1]=a;for(var l=2;l<i;l++)s[l]=n[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},79737:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return d},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),s=["components"],a={id:"clock",title:"Test Clock",sidebar_label:"Test Clock",slug:"test_clock.html"},c=void 0,l={unversionedId:"extensions/clock",id:"version-5.5/extensions/clock",title:"Test Clock",description:"Latest Release",source:"@site/versioned_docs/version-5.5/extensions/clock.md",sourceDirName:"extensions",slug:"/extensions/test_clock.html",permalink:"/docs/extensions/test_clock.html",draft:!1,editUrl:"https://github.com/kotest/kotest/blob/master/documentation/versioned_docs/version-5.5/extensions/clock.md",tags:[],version:"5.5",frontMatter:{id:"clock",title:"Test Clock",sidebar_label:"Test Clock",slug:"test_clock.html"},sidebar:"extensions",previous:{title:"Robolectric",permalink:"/docs/extensions/robolectric.html"},next:{title:"Pitest",permalink:"/docs/extensions/pitest.html"}},p={},u=[],m={toc:u};function d(e){var t=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"https://search.maven.org/artifact/io.kotest.extensions/kotest-extensions-clock"},(0,i.kt)("img",{parentName:"a",src:"https://img.shields.io/maven-central/v/io.kotest.extensions/kotest-extensions-clock",alt:"Latest Release"}))),(0,i.kt)("p",null,"The JVM provides the java.time.Clock interface which is used to generate ",(0,i.kt)("inlineCode",{parentName:"p"},"Instant"),"s. When we have code that relies on time,\nwe can use a ",(0,i.kt)("inlineCode",{parentName:"p"},"Clock")," to generate the values, rather than using things like ",(0,i.kt)("inlineCode",{parentName:"p"},"Instant.now()")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"System.currentTimeMillis()"),"."),(0,i.kt)("p",null,"Then in tests we can provide a fixed or controllable clock which avoids issues where the time changes on each test run.\nIn your real code, you provide an instance of Clock.systemUTC() or whatever."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"The following module is needed: ",(0,i.kt)("inlineCode",{parentName:"p"},"io.kotest.extensions:kotest-extensions-clock")," in your build. Search maven central for latest version ",(0,i.kt)("a",{parentName:"p",href:"https://search.maven.org/search?q=kotest-extensions-clock"},"here"),".")),(0,i.kt)("p",null,"In order to use it, we create an instance of the ",(0,i.kt)("inlineCode",{parentName:"p"},"TestClock")," passing in an instant and a zone offset."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"val timestamp = Instant.ofEpochMilli(1234)\nval clock = TestClock(timestamp, ZoneOffset.UTC)\n")),(0,i.kt)("p",null,"We can control the clock via ",(0,i.kt)("inlineCode",{parentName:"p"},"plus")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"minus")," which accept durations, eg"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"clock.plus(6.minutes)\n")),(0,i.kt)("p",null,"Note that the clock is mutable, and the internal state is changed when you use plus or minus."))}d.isMDXComponent=!0}}]);